.\"-
.\" Copyright (c) 1990, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd August 10, 2017
.Dt RECORD 1
.Os
.Sh NAME
.Nm record
.Nd record command execution.
.Sh SYNOPSIS
.Nm
.Op Fl ph 
.Op Fl o Ar file
.Op Fl e Ar entries
.Op Fl c Ar cores 
.Ar command Op Ar args
.Sh DESCRIPTION
The
.Nm
utility is part of the Castor record/replay system. It 
records program execution to a log, which can later be replayed with
the
.Xr replay 1
utility. To do this efficiently, it records only non-deterministic inputs
e.g. the result of system calls such as
.Xr getpid 2 ,
.Xr gettimeofday 2 ,
.Xr read 2 , 
.Xr recv 2 , 
etc. to a log file. It does this through a
combination of compile time instrumentation using
.Xr clang 1 and shared library interposition.


.Pp
The options are as follows:
.Bl -tag -width indent
.It Fl o Ar file
write the log to the specified
.Ar file
instead of a file named default.rr.

.It .Fl p
Pin threads to cores.

.Fl r Ar size
Sets the shared memory region used to queue events between application and
recording agent to .Ar size.

.Fl c Ar cores

Sets maximum number of cores to use for application threads to .Ar cores.


.Sh EXIT STATUS
If an error occurs
.Nm
exits 1, otherwise, it exists with whatever the exit status of the program being recorded.  
.Sh NOTES
XXX stuff you need to know to understand/use this.

For example:
..Sh EXAMPLES
Record simple program .Pa helloworld.
directory hierarchy:
.Pp
.Dl $ record ./helloworld
RECORD
Hello World!
TXGQ Done
.Dl $ replay ./helloworld
REPLAY
Hello World!

.Sh COMPATIBILITY

Assumes application has been compiled with clang/clang++ using the Castor
compiler pass to instrument the binary XXX how does this work?



.Sh SEE ALSO
.Xr replay 1 ,
.Xr rrlog 1 ,
.Sh BUGS

XXX stuff about known bugs/how to report bugs.

