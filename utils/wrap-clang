#!/usr/bin/env python

import sys
import os

rr_path = os.path.dirname(os.path.abspath(os.path.join(__file__ ,'..')))
sysroot_path = os.path.join(rr_path, 'sysroot/usr/amd64-freebsd/')
runtime_path = os.path.join(rr_path, 'build/lib/Runtime/libCastorRuntime.o')
#print "rr_path:", rr_path
#print "sysroot_path:", sysroot_path
#print "runtime_path:", runtime_path

def ok_to_add_stuff(args):
    for arg in args:
        if arg in ['-E','-S','-c']:  #is this is a linker pass?
            return False
        if arg in ['-shared']:
            return False
    return True

def is_library(arg):
    return arg.startswith('-l')

def is_object(arg):
    return arg.endswith('.o')

def insert_runtime(args):
    result = args
    objects = filter(is_object,args)
    if len(objects) > 0:
        result.insert(result.index(objects[0]), runtime_path)
    return result

def insert_libraries(args):
    result = args
    libraries = filter(is_library,args)
    if len(libraries) == 0:       #no libraries, hmmm, skip it
        return result
    if '-lc' in libraries: #insert before libc
        if not ('-lpthread' in libraries):
            result.insert(result.index('-lc'), '-lpthread')
    else:
        if not ('-lpthread' in libraries):
            result.insert(result.index(libraries[-1]) + 1,'-lpthread')
    return result

def wrap_target_list(args):
    result = []
    if (args[0].startswith('--wrap-targets=')):
        param = args.pop(0)
        target_string = param.split('=')[1]
        result = target_string.split(',')
    return result

def wrap_test(args):
    if (args[0] == '--wrap-test'):
        args.pop(0)
        return True
    return False

def build_target(args):
    result = None
    if ('-o' in args):
        result = args[args.index('-o') + 1]
    return result

args = sys.argv[1:]
test = wrap_test(args)
wrap_targets = wrap_target_list(args)
target = build_target(args)

if target in wrap_targets:
    print "wrap-clang modifying: " + target
    args = insert_runtime(args)
    args = insert_libraries(args)
    args = ['-static'] + args #prepend static

#always prepend sysroot
args = ['--sysroot=' + sysroot_path] + args

clang = 'clang'
final_args = [clang] + args

if test == True:
    print "Test Mode, would run: ", ' '.join(final_args)
else:
    print ' '.join(final_args)
    os.execvp(clang,final_args)
