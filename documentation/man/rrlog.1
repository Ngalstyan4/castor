.\" Text automatically generated by txt2man
.TH rrlog 1 "16 June 2018" "man" "FreeBSD Reference Manual"
.SH NAME
\fBrrlog â€“ display contents of replay log.
\fB
.SH SYNOPSIS
.nf
.fam C
  \fBrrlog\fP [\fIoptions\fP] \fIpath-to-logfile\fP

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
The \fBrrlog\fP utility is part of the Castor record/replay system. It displays
.TP
.B
the contents of a log which has been recorded using the \fBrecord\fP(1) utility.
and ends with a summary.
.SH OPTIONS
.TP
.B
\fB-h\fP
Help - displays summary of \fIoptions\fP.
.TP
.B
\fB-d\fP
Dump - display raw log records, interpretation is described in                       the log format section below.
.TP
.B
\fB-t\fP
Truss - truss mode, just display system calls.
.TP
.B
\fB-a\fP
All -  display all events. (default)
.TP
.B
\fB-h\fP
Help - display this message.
.TP
.B
\fB-s\fP
Summary - show summary of total # of events by type and thread.
.SH TRUSS MODE FORMAT
The truss mode displays most (see ALL mode for exceptions) of the system call
events in the log in a more easily readable format, similar to truss. It is
interpreted as follows: System call fields shown with an '_' denote fields 
that castor does not record. If a leading object e.g. file descriptor of object
has been recorded this is displayed inline e.g. in getrlimit. Subsequent fields
that have been recorded are shown by their name e.g. buf, rpl, and if castor
can parse and display their contents are shown in brackets after the return
value (which follows the '=' sign).
.RE
.PP
EXAMPLE:
.PP
.nf
.fam C
    $> rrlog -t ./unit-tests/udp.rr
    readlink(_, buf, _) = -1 [errno: ENOENT]
    issetugid() = 0
    getrlimit(3,rlp) = 0
    getpid() = 84465
    fstat(1,sb) = 0   [sb: { mode=-rw-r--r-- ,inode=605802,size=184,blksize=4096 }]

.fam T
.fi
.SH ALL MODE FORMAT
Includes everything from TRUSS mode, plus all other events logged in the core
runtime (as opposed to by the system call recording facility which is generated
programmatically) the runtime, including thread locking events, inline
assembly, and a small number of system calls. Often truss mode is
all that's needed to understand a problem, but sometimes ALL mode is
useful and nicer to look at than RAW mode.
.SH RAW LOG FORMAT
The log is a sorted collection of entries with the following fields which
are displayed in order:
.PP
"Event #", "Thread #", "Event", "Object ID", "Value[0] - Value[4]"
.PP
These fields denote the following:
.PP
Event # - order event was recorded/will be replayed.
.PP
Thread # - threadid of thread which logged the event.
.PP
Event - name of event that generated the log entry: the name will either
be of a system call e.g. FORK, WAIT, GETPID. Argument data for a system
call: DATA, A thread library call: e.g. MUTEX_INIT, COND_INIT, SPIN_LOCK.
or a compiler primitive: ATOMIC_LOAD, INLINE_ASM. Or additional castor
meta-data e.g. LOCKED_EVENT
.PP
Object ID - stores the object a system call is operating on e.g. the file
descriptor # for \fBread\fP(2) or the socket descriptor # for \fBsendmsg\fP(2).
.PP
VALUE[0-4] - contents of this field is system call dependant. In general
VALUE[0] stores the result of a system call, VALUE[1] stores the value of
errno if result < 0. Value fields can also be used to store the side
effects of system calls e.g. that are small enough to be stored with the
event and don't require seperate data records.
.RE
.PP

.SH EXIT STATUS
If an error occurs while reading the log exits 1, otherwise, exits 0.
.SH COMPATIBILITY
Castor only targets FreeBSD Release 1.2 Stable and beyond.
.SH SEE ALSO
\fBreplay\fP(1), \fBrecord\fP(1), \fBrr_printf\fP(3), \fBrr_assert\fP(3)
