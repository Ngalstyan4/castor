NAME
    rrlog â€“ display contents of replay log.

SYNOPSIS
    rrlog [options] path-to-logfile

DESCRIPTION
     The rrlog utility is part of the Castor record/replay system. It displays
     the contents of a log which has been recorded using the record(1) utility.	   and ends with a summary.

OPTIONS
  -h            Help - displays summary of options.
  -d            Dump - display raw log records, interpretation is described in			     the log format section below.
  -t            Truss - truss mode, just display system calls.
  -a            All -  display all events. (default)
  -h            Help - display this message.
  -s            Summary - show summary of total # of events by type and thread.

TRUSS MODE FORMAT
    The truss mode displays most (see ALL mode for exceptions) of the system call
    events in the log in a more easily readable format, similar to truss. It is
    interpreted as follows: System call fields shown with an '_' denote fields 
    that castor does not record. If a leading object e.g. file descriptor of object
    has been recorded this is displayed inline e.g. in getrlimit. Subsequent fields
    that have been recorded are shown by their name e.g. buf, rpl, and if castor
    can parse and display their contents are shown in brackets after the return
    value (which follows the '=' sign).

EXAMPLE:

    $> rrlog -t ./unit-tests/udp.rr
    readlink(_, buf, _) = -1 [errno: ENOENT]
    issetugid() = 0
    getrlimit(3,rlp) = 0
    getpid() = 84465
    fstat(1,sb) = 0   [sb: { mode=-rw-r--r-- ,inode=605802,size=184,blksize=4096 }]

ALL MODE FORMAT
    Includes everything from TRUSS mode, plus all other events logged in the core
    runtime (as opposed to by the system call recording facility which is generated
    programmatically) the runtime, including thread locking events, inline
    assembly, and a small number of system calls. Often truss mode is
    all that's needed to understand a problem, but sometimes ALL mode is
    useful and nicer to look at than RAW mode.

RAW LOG FORMAT
     The log is a sorted collection of entries with the following fields which
     are displayed in order:

     "Event #", "Thread #", "Event", "Object ID", "Value[0] - Value[4]"

     These fields denote the following:

     Event # - order event was recorded/will be replayed.

     Thread # - threadid of thread which logged the event.

     Event - name of event that generated the log entry: the name will either
     be of a system call e.g. FORK, WAIT, GETPID. Argument data for a system
     call: DATA, A thread library call: e.g. MUTEX_INIT, COND_INIT, SPIN_LOCK.
     or a compiler primitive: ATOMIC_LOAD, INLINE_ASM. Or additional castor
     meta-data e.g. LOCKED_EVENT

     Object ID - stores the object a system call is operating on e.g. the file
     descriptor # for read(2) or the socket descriptor # for sendmsg(2).

     VALUE[0-4] - contents of this field is system call dependant. In general
     VALUE[0] stores the result of a system call, VALUE[1] stores the value of
     errno if result < 0. Value fields can also be used to store the side
     effects of system calls e.g. that are small enough to be stored with the
     event and don't require seperate data records.


EXIT STATUS
  If an error occurs while reading the log exits 1, otherwise, exits 0.

COMPATIBILITY
    Castor only targets FreeBSD Release 1.2 Stable and beyond.

SEE ALSO
     replay(1), record(1), rr_printf(3), rr_assert(3)
