NAME
    replay â€“ replay program execution.

SYNOPSIS
    replay [options] [program path] [args]

DESCRIPTION
     The replay utility is part of the Castor record/replay system. It replays
     program execution from a log which was captured using the record(1) utility.

     replay reads all non-deterministic inputs e.g. from system calls such as
     getpid(2), read(2), or recv(2), from the log file and feeds them back to the
     application using, as well as enforcing the same order of non-deterministic
     operations on shared state such as lock acquire/release as took place during
     initial program execution.

     The program binary may be modified between record and replay time, so long
     as the modifications do not introduce new non-determinism. For example, calls
     to rr_printf(3) or rr_assert(3) can be added to support debugging at replay
     time.

OPTIONS

  -h            Help

  -o [file]     Log file name. (default: default.rr)


  -r [size]     Size of shared region memory region used to communicate between record
		process and application processes. (default: XXX)

  -e [entries]  Number of entries per thread in shared memory queues (default: XXX)

  -c [cores]    Maximum number of application cores (default: no core limit)

  -p            Pin threads

  -t            Stops child process on creation for attaching a debugger in replay mode

  -i            Interactive debug shell

  -s            Sandbox replayed child process using capsicum(4)

  -t            Stops child process on creation for attaching a debugger in replay mode


EXIT STATUS
  If an error occurs replay exits 1, otherwise, it exists with whatever the
  exit status of the program being replayed.

COMPATIBILITY
    Castor only targets FreeBSD Release 1.2 Stable and beyond.

LIMITATIONS
    Castor may not be able to replay applications that make system calls
    directly or that don't build with the castor compiler pass.

SEE ALSO
     replay(1), rrlog(1), rr_printf(3), rr_assert(3)
